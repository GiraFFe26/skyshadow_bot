import requests
import time
import hashlib
from datetime import datetime, timedelta
import zoneinfo
import httplib2
import apiclient.discovery
from oauth2client.service_account import ServiceAccountCredentials
from requests.exceptions import ConnectTimeout, ReadTimeout


class digiseller_api:
    def __init__(self):
        self.API = '' #api-key
        self.SELLER_ID = int('') #id –ø—Ä–æ–¥–∞–≤—Ü–∞

    # –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–ê
    def get_token(self):
        timestamp = str(int(time.time()))
        sign = hashlib.sha256((self.API + timestamp).encode('UTF-8')).hexdigest()
        headers = {'Content-Type': 'application/json',
                   'Accept': 'application/json'}
        json_data = {
            "seller_id": self.SELLER_ID,
            "timestamp": timestamp,
            "sign": sign
        }
        r = requests.post('https://api.digiseller.ru/api/apilogin', headers=headers, json=json_data).json()
        return r['token']

    def get_product_info(self, unique_code, token):
        headers = {'Accept': 'application/json'}
        r = requests.get(f'https://api.digiseller.ru/api/purchases/unique-code/{unique_code}?token={token}', headers=headers).json()
        if r['retdesc'] == '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä unique_code' or r['retdesc'] == '–Ω–µ –Ω–∞–π–¥–µ–Ω unique_code':
            return r['retdesc']
        if r["unique_code_state"]["options"] == 1:
            status = '—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω'
        elif r["unique_code_state"]["options"] == 2:
            status = '—Ç–æ–≤–∞—Ä –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –Ω–µ –æ–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç–∞'
        elif r["unique_code_state"]["options"] == 3:
            status = '—Ç–æ–≤–∞—Ä –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞'
        elif r["unique_code_state"]["options"] == 4:
            status = '—Ç–æ–≤–∞—Ä –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç'
        elif r["unique_code_state"]["options"] == 5:
            status = '—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä–µ–Ω, —Ç–æ–≤–∞—Ä –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
        return f'–í–∞—à —Ç–æ–≤–∞—Ä: {r["name_invoice"].replace("?", "")}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–¥–µ–ª–∫–∏: {status}'

    def get_sales(self, token):
        headers = {'Content-Type': "application/json",
                   'Accept': "application/json"}
        offset = datetime.now(zoneinfo.ZoneInfo("Europe/Moscow"))
        offset = datetime.strftime(offset, "%Y-%m-%d %H:%M:%S")
        json_data = {
                  "date_start": str(datetime.strptime(offset, "%Y-%m-%d %H:%M:%S") - timedelta(minutes=3)),
                  "date_finish": str(offset),
                  "returned": 0,
                  "page": 1,
                  "rows": 10
                }
        try:
            r = requests.post(f'https://api.digiseller.ru/api/seller-sells/v2?token={token}', headers=headers, json=json_data).json()
        except (ConnectTimeout, ReadTimeout):
            r = requests.post(f'https://api.digiseller.ru/api/seller-sells/v2?token={token}', headers=headers, json=json_data).json()
        print(r)
        for i in r['rows']:
            invoice_id = i['invoice_id']
            self.send_message(invoice_id, token)
            product = self.check_for_sheets(invoice_id, token)
            mail = i['email']
            date_pay = datetime.strptime(i['date_pay'], "%Y-%m-%d %H:%M:%S").strftime("%d.%m.%Y %H:%M")
            self.send_to_sheets(invoice_id, mail, product, date_pay)

    def check_for_sheets(self, invoice_id, token):
        headers = {'Accept': 'application/json'}
        r = requests.get(f'https://api.digiseller.ru/api/purchase/info/{invoice_id}?token={token}', headers=headers).json()
        print(r)
        r = r['content']
        item_id = int(r['item_id'])
        with open('ids.txt', 'r', encoding='UTF-8') as file:
            ids = [int(i.strip()) for i in file.readlines()]
        if item_id in ids:
            return r["name"]
        r = r['options']
        if r[-1]['name'] == 'Where can I contact you?' or r[-1]['name'] == '–ì–¥–µ —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è?':
            r = r[-2]
        else:
            r = r[-1]
        return f'{r["name"]} {r["user_data"]}'

    # –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ( –ß–¢–û–ë–´ –ü–ï–†–ï–ù–ï–°–¢–ò –ù–ê –ù–û–í–£–Æ –°–¢–†–û–ö–£ –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø \n )
    def send_message(self, invoice_id, token):
        headers = {'Accept': "application/json",
                   'Content-Type': "application/json"}
        json_data = {
          "message": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
                     "–£ –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å:\n\n"
                     "üôç‚Äç‚ôÇ: –ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á—É —Å–≤–æ–π —Ç–æ–≤–∞—Ä? üì¶\n"
                     "üëî: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å 24 —á–∞—Å–∞\n\n"
                     "üôç‚Äç‚ôÇ: –ú–æ–≥—É –ª–∏ —è —É—Å–∫–æ—Ä–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞? ‚è≥\n"
                     "üëî: –î–∞! –ï—Å–ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞,"
                     " –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ "
                     "(https://t.me/Sky_ShopBot) –∫–æ—Ç–æ—Ä—ã–π —É—Å–∫–æ—Ä–∏—Ç –≤—Ö–æ–¥ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n"
                     "‚ö† –ë–æ—Ç –Ω–µ –≤—ã–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä, –æ–Ω —É—Å–∫–æ—Ä—è–µ—Ç –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç!\n\n"
                     "üôç‚Äç‚ôÇ: –Ø –Ω–µ –ø–æ–ª—å–∑—É—é—Å—å —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞–º/—è –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞. –ö–∞–∫ —è –º–æ–≥—É –µ—â–µ —É—Å–∫–æ—Ä–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞? ‚è≥\n"
                     "üëî: –û—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ —Å–æ—Ü. —Å–µ—Ç–∏, –≥–¥–µ —è —Å–º–æ–≥—É —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è. –ò–ª–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–∞–Ω–Ω—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
                     "üôç‚Äç‚ôÇ: –ö–∞–∫ —è –ø–æ–π–º—É, —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ? üì¶\n"
                     "üëî: –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —è –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ –∏–ª–∏ –ø–∏—à—É –≤–∞–º —Å —Å–æ—Ü. —Å–µ—Ç—å, —Ç–∞–∫–∂–µ –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—á–µ–∫–∏), —á—Ç–æ –≤—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ —Ç–æ–≤–∞—Ä\n\n"
                     "üôç‚Äç‚ôÇ: –Ø –≤–æ—à–µ–ª —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n"
                     "üëî: –í–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—Ç—å. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —è –≤–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–± —ç—Ç–æ–º —Å–æ–æ–±—â—É. –ù–∞–ø–æ–º–∏–Ω–∞—é, –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –º–æ–∂–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å –º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞.\n\n"
                     "üôç‚Äç‚ôÇ: –ü—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ, —è —Å–º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä?\n"
                     "üëî: –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –º–∞–≥–∞–∑–∏–Ω–∞, –≤—ã —Å 95% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è.\n"
                     "–ò—Å–∫–ª—é—á–µ–Ω–∏—è: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Microsoft, –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ üëî",
          "files": [
            {
              "newid": "",
              "name": "",
              "type": ""
            },
          ]
        }
        requests.post(f'https://api.digiseller.ru/api/debates/v2/?token={token}&id_i={invoice_id}', headers=headers,
                      json=json_data)

    def send_to_sheets(self, invoice_id, mail, product, date_pay):
        # –§–∞–π–ª, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –≤ Google Developer Console
        CREDENTIALS_FILE = 'creds.json'
        # ID Google Sheets –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ –µ–≥–æ URL)
        spreadsheet_id = ''
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∏ –ø–æ–ª—É—á–∞–µ–º service ‚Äî —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–æ—Å—Ç—É–ø–∞ –∫ API
        credentials = ServiceAccountCredentials.from_json_keyfile_name(
            CREDENTIALS_FILE,
            ['https://www.googleapis.com/auth/spreadsheets',
             'https://www.googleapis.com/auth/drive'])
        httpAuth = credentials.authorize(httplib2.Http())
        service = apiclient.discovery.build('sheets', 'v4', http=httpAuth)

        values = service.spreadsheets().values().get(
            spreadsheetId=spreadsheet_id,
            range=f"–í–µ—Å—å –æ—Ç—á–µ—Ç 11.09.22 - 11.10.22!A:Z",
        ).execute()
        x = len(values['values']) + 1

        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        service.spreadsheets().values().batchUpdate(
            spreadsheetId=spreadsheet_id,
            body={
                "valueInputOption": "USER_ENTERED",
                "data": [
                    {"range": f"–í–µ—Å—å –æ—Ç—á–µ—Ç 11.09.22 - 11.10.22!A{x}:D{x}",
                     "majorDimension": "ROWS",
                     "values": [[invoice_id, mail, product, date_pay]]}
                ]
            }
        ).execute()
