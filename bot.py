from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
#from aiogram.methods.restrict_chat_member import RestrictChatMember
import asyncio
from seller import digiseller_api
from login import login
# import logging
# logging.basicConfig(filename='log.txt', filemode='a', format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
#                     datefmt='%H:%M:%S', level=logging.DEBUG)
# logging.info("Log started")

bot = Bot(token='')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class UserState(StatesGroup):
    code = State()
    mail = State()
    password = State()
    pick_num = State()
    info = State()
    accept = State()


async def token():
    global token
    while True:
        token = digiseller_api().get_token()
        print(token)
        await asyncio.sleep(3600)


async def sales():
    while True:
        digiseller_api().get_sales(token)
        await asyncio.sleep(180)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–°—Ç–∞—Ç—É—Å –¢–æ–≤–∞—Ä–∞ üó∫').add('–¢–æ–≤–∞—Ä—ã –ü—Ä–æ–¥–∞–≤—Ü–∞ üì¶').add('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü—Ä–æ–¥–∞–≤—Ü–µ üëî')
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ start
    await message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞—á–∞–ª–µ –±–æ—Ç–∞!üè†', reply_markup=keyboard)


@dp.message_handler(Text(equals='–°—Ç–∞—Ç—É—Å –¢–æ–≤–∞—Ä–∞ üó∫'))
async def check_id(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞ üö´')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à 16-–∑–Ω–∞—á–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ (–±–µ–∑ –¥–æ–ø. —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ—á–µ–≥–æ) üìù', reply_markup=keyboard)
    #await bot(RestrictChatMember(message.from_user.id, ))
    await UserState.code.set()


@dp.message_handler(state=UserState.code)
async def process_message(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞ üö´' or message.text == '/start':
        await state.finish()
        return await start(message)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞ üö´')
        await state.update_data(code=message.text)
        answer = digiseller_api().get_product_info(message.text, token)
        if answer == '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ –∑–∞–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä unique_code' or answer == '–Ω–µ –Ω–∞–π–¥–µ–Ω unique_code':
            return await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–Ω–æ–≤–æ!üéõ\n{answer}', reply_markup=keyboard)
        await message.reply(f'–í–∞—à –∫–æ–¥ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π!üëç\n{answer}')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ª–æ–≥–∏–Ω –æ—Ç Microsoft (Xbox) üîí', reply_markup=keyboard)
        await UserState.next()


@dp.message_handler(state=UserState.mail)
async def process_message(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞ üö´' or message.text == '/start':
        await state.finish()
        return await start(message)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞ üö´')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç Microsoft (Xbox) üîê', reply_markup=keyboard)
        await state.update_data(mail=message.text)
        await UserState.next()


@dp.message_handler(state=UserState.password)
async def process_message(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞ üö´' or message.text == '/start':
        await state.finish()
        return await start(message)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞ üö´')
        await message.answer('–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ üîì')
        await state.update_data(password=message.text)
        data = await state.get_data()
        microsoft = login(data['mail'], data['password'])
        msg = microsoft.driver_start()
        if msg[0] == 'no_accept':
            await state.finish()
            with open('ENTERED.png', 'rb') as photo:
                await bot.send_photo(message.from_user.id, photo)
            await message.answer('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!üíõ')
        elif msg[0] == 'accept':
            with open('ENTERED.png', 'rb') as photo:
                await bot.send_photo(message.from_user.id, photo)
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞')
            for i in range(1, msg[1] + 1):
                keyboard.add(str(i))
            await UserState.next()
            await message.answer('–° –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —É–¥–æ–±–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Çüéõ', reply_markup=keyboard)
        elif msg[0] == 'screen_accept':
            with open('ENTERED.png', 'rb') as photo:
                await bot.send_photo(message.from_user.id, photo)
            await state.finish()
            await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥, –∫–∞–∫ —Å–∫–∞–∑–∞–Ω–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥!‚è≥\n–î–∞–ª—å–Ω–µ–π—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ')
        else:
            await state.finish()
            return await message.answer(msg[0], reply_markup=keyboard)


@dp.message_handler(state=UserState.pick_num)
async def process_message(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞ üö´' or message.text == '/start':
        await state.finish()
        return await start(message)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞ üö´')
        try:
            num = int(message.text)
        except ValueError:
            return await message.answer(f'–ö–æ–¥ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!üî¢', reply_markup=keyboard)
        await message.answer('–°–µ–∫—É–Ω–¥–æ—á–∫—É', reply_markup=keyboard)
        await state.update_data(pick_num=num)
        data = await state.get_data()
        microsoft = login(data['mail'], data['password'])
        msg = microsoft.accept(num)
        await message.answer(msg[0], reply_markup=keyboard)
        if msg[1] == 1:
            await UserState.next()
        elif msg[1] == 2:
            await UserState.next()
        elif msg[1] == 3:
            await state.finish()
            await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –Ω–∞ —ç—Ç–æ–º –±–æ—Ç —Å –í–∞–º–∏ –ø—Ä–æ—â–∞–µ—Ç—Å—è üíõ")


@dp.message_handler(state=UserState.info)
async def process_message(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞ üö´' or message.text == '/start':
        await state.finish()
        return await start(message)
    else:
        await state.update_data(info=message.text)
        data = await state.get_data()
        microsoft = login(data['mail'], data['password'])
        microsoft.accept_1(data['pick_num'], message.text)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞ üö´')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –í–∞–º –∫–æ–¥‚úè', reply_markup=keyboard)
        await UserState.next()


@dp.message_handler(state=UserState.accept)
async def process_message(message: types.Message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∞ üö´' or message.text == '/start':
        await state.finish()
        return await start(message)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–û—Ç–º–µ–Ω–∞ üö´')
        await message.answer('–ó–∞—Ö–æ–¥–∏–º‚è≥', reply_markup=keyboard)
        await state.update_data(accept=message.text)
        data = await state.get_data()
        microsoft = login(data['mail'], data['password'])
        msg = microsoft.accept_2(data['pick_num'], message.text)
        await state.finish()
        with open('ENTERED.png', 'rb') as photo:
            await bot.send_photo(message.from_user.id, photo)
        await message.answer('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!üíõ')


@dp.message_handler(Text(equals='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü—Ä–æ–¥–∞–≤—Ü–µ üëî'))
async def info_seller(message: types.Message):
    await message.answer('‚úÖ–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤:\nTelegram: https://t.me/PipSqick\nDiscord: SkyshadoW#7050\nVK: https://vk.com/pipsqick\n–ü–æ—á—Ç–∞: skyshadow.sky@inbox.ru')


@dp.message_handler(Text(equals='–¢–æ–≤–∞—Ä—ã –ü—Ä–æ–¥–∞–≤—Ü–∞ üì¶'))
async def info_products(message: types.Message):
    await message.answer('üì¶ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: https://plati.market/seller/sky-shop/1078014/',
                         disable_web_page_preview=True)


@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞ üö´'))
async def info_seller(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add('–°—Ç–∞—Ç—É—Å –¢–æ–≤–∞—Ä–∞ üó∫').add('–¢–æ–≤–∞—Ä—ã –ü—Ä–æ–¥–∞–≤—Ü–∞ üì¶').add('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ü—Ä–æ–¥–∞–≤—Ü–µ üëî')
    await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ –±–æ—Ç–∞üè†', reply_markup=keyboard)


if __name__ == '__main__':
    asyncio.get_event_loop().create_task(token())
    asyncio.get_event_loop().create_task(sales())
    executor.start_polling(dp, skip_updates=True)

